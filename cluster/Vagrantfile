# -*- mode: ruby -*-
# # vi: set ft=ruby :
ENV['VAGRANT_NO_PARALLEL'] = 'yes'
VAGRANTFILE_API_VERSION = "2"

box_amg64='ubuntu-18.04-amd64'
box_generic='generic/ubuntu1804'
kube_version='1.13.5*'
kube_cni_version='0.7.5*'

vagrant_root = File.dirname(__FILE__)

number_of_master_nodes      = 1
number_of_worker_nodes      = 1
ip_range           = '10.11.0'
pod_network_cidr   = '10.12.0.0/16'
service_cidr       = '10.13.0.0/16'
service_dns_domain = 'cluster.local'
dns_domain         = 'cluster.vagrant'
netmask            = '255.255.255.0'
box                ='generic/ubuntu1804'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = box
  config.vm.box_check_update = false
  config.ssh.forward_agent = true

  if Vagrant.has_plugin?('vagrant-cachier')
    config.cache.scope = :machine
  end

  if Vagrant.has_plugin? 'vagrant-hostmanager'
    config.hostmanager.enabled = true
  else
    msg = "vagrant-hostmanager missing, please install the plugin with this command:"
    msg << "\nvagrant plugin install vagrant-hostmanager"
    raise msg
  end

  config.vm.provider 'virtualbox' do |vb|
    vb.linked_clone = true
    vb.cpus = 1
  end

  (1..number_of_master_nodes).each do |n|
    type = "master"
    name = "#{type}-#{n}"
    fqdn = "#{name}.#{dns_domain}"
    ip = "#{ip_range}.10#{n}"

    config.vm.define name do |cfg|
      cfg.vm.provider 'virtualbox' do |vb|
        vb.memory = 1024
        vb.gui = false
        vb.linked_clone = true
        vb.name = name
      end
      cfg.vm.hostname = fqdn
      cfg.hostmanager.aliases = fqdn
      cfg.hostmanager.manage_host = true
      cfg.hostmanager.manage_guest = true
      cfg.vm.network "private_network", ip: ip, netmask: netmask
        # auto_config: true,
        # virtualbox__intnet: "k8s-net"
      cfg.vm.synced_folder "#{vagrant_root}/#{type}", "/data/", owner: "vagrant", group: "vagrant"
      cfg.vm.synced_folder "#{vagrant_root}/temp", "/vagrant/", owner: "vagrant", group: "vagrant"
      cfg.vm.post_up_message = post_up_message("Master", name)
      cfg.vm.provision 'shell', path: 'shared/base.sh', privileged: true, args: ["#{type}", n]
      cfg.vm.provision 'shell', path: 'shared/docker.sh', privileged: true, args: ["#{type}", n]
      cfg.vm.provision 'shell', path: 'shared/tools.sh', privileged: true,
          args: ["#{type}", n, ip, kube_version, kube_cni_version]
      cfg.vm.provision 'shell', path: "shared/#{type}.sh", privileged: true,
          args: [ip, pod_network_cidr, service_cidr, service_dns_domain, n]
      cfg.vm.provision "shell", inline: <<-SHELL
        set -e
        echo "Updating Master node..."
        echo "cd /vagrant" >> /home/vagrant/.bashrc
      SHELL
    end
  end

  (1..number_of_worker_nodes).each do |n|
    type = 'worker'
    name = "#{type}-#{n}"
    fqdn = "#{name}.#{dns_domain}"
    ip = "#{ip_range}.11#{n}"

    config.vm.define name do |cfg|
      cfg.vm.provider 'virtualbox' do |vb|
        vb.memory = 1024
        vb.gui = false
        vb.linked_clone = true
        vb.name = name
      end
      cfg.vm.hostname = fqdn
      cfg.hostmanager.manage_host = true
      cfg.hostmanager.aliases = fqdn
      cfg.vm.network "private_network", ip: ip, netmask: netmask
      cfg.vm.synced_folder "#{vagrant_root}/#{type}", "/data/", owner: "vagrant", group: "vagrant"
      cfg.vm.synced_folder "#{vagrant_root}/temp", "/vagrant/", owner: "vagrant", group: "vagrant"
      cfg.vm.post_up_message = post_up_message("Worker #{n}", name)
      cfg.vm.provision 'shell', path: 'shared/base.sh', privileged: true, args: ["#{type}", n]
      cfg.vm.provision 'shell', path: 'shared/docker.sh', privileged: true, args: ["#{type}", n]
      cfg.vm.provision 'shell', path: 'shared/tools.sh', privileged: true,
        args: ["#{type}", n, ip, kube_version, kube_cni_version]
      cfg.vm.provision 'shell', path: "shared/#{type}.sh", privileged: true
      cfg.vm.provision 'shell', path: 'shared/access.sh', privileged: false
      cfg.vm.provision 'shell', inline: <<-SHELL
        set -e
        echo "Updating Worker node..."
        echo "cd /vagrant" >> /home/vagrant/.bashrc
      SHELL
      # Run post install script only if last Worker
      isLastBox = n == number_of_worker_nodes
      if isLastBox
        cfg.vm.provision 'shell', path: "shared/post-install.sh"
      end
    end
  end

end

def post_up_message(node_name, node_id)
  msg = "Kubernetes #{node_name} is ready to use!"
  msg << "\n - You can SSH into the machine with `BOX_NAME=#{node_id} make box-ssh`."
  msg
end
